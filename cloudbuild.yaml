# cloudbuild.yaml (Corrigido com Logging e Artifact Registry)

timeout: '1600s'
steps:
  # 1. Testar
  - name: 'python:3.9'
    id: Testar
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install -r requirements-dev.txt
        # Executa testes ignorando raw E refined (Apenas Trusted)
        pytest tests/ --ignore=tests/test_raw_transforms.py --ignore=tests/test_refined_transforms.py
        # Executa testes ignorando raw E trusted (Apenas Refined) - SE precisar testar refined separadamente
        # pytest tests/ --ignore=tests/test_raw_transforms.py --ignore=tests/test_trusted_transforms.py

  # 2. Construir Imagem (Usando Artifact Registry)
  - name: 'gcr.io/cloud-builders/docker' # Usar 'gcr.io/cloud-builders/docker' ainda é comum para construir
    id: Build-Image
    args:
      - 'build'
      # --- Caminho CORRETO do Artifact Registry ---
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/hotelaria-pipelines-repo/hotelaria-pipeline:latest'
      - '.'
    waitFor: ['Testar']

  # 3. Enviar Imagem (Usando Artifact Registry)
  - name: 'gcr.io/cloud-builders/docker' # Usar 'gcr.io/cloud-builders/docker' ainda é comum para enviar
    id: Push-Image
    args:
      # --- Caminho CORRETO do Artifact Registry ---
      - 'push'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/hotelaria-pipelines-repo/hotelaria-pipeline:latest'
    waitFor: ['Build-Image']

  # 4. Publicar Template RAW (Apontando para Imagem no Artifact Registry)
  - name: 'google/cloud-sdk:latest' # Imagem atualizada do gcloud
    id: Publish-Raw-Template
    entrypoint: 'gcloud'
    args:
      - 'dataflow'
      - 'flex-template'
      - 'build'
      - 'gs://${_BUCKET_TEMPLATES}/templates/hotelaria_raw_pipeline.json'
      # --- CORREÇÃO PRINCIPAL: Usar --image apontando para Artifact Registry ---
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/hotelaria-pipelines-repo/hotelaria-pipeline:latest'
      - '--sdk-language=PYTHON'
      - '--metadata-file=metadata_raw.json' # Adicione se usar metadados
      # Se não usar metadados, defina o módulo via env var:
      # - '--env=FLEX_TEMPLATE_PYTHON_PY_MODULE=hotelaria_pipeline.raw.main_raw'
    waitFor: ['Push-Image']

  # 5. Publicar Template TRUSTED (Apontando para Imagem no Artifact Registry)
  - name: 'google/cloud-sdk:latest' # Imagem atualizada do gcloud
    id: Publish-Trusted-Template
    entrypoint: 'gcloud'
    args:
      - 'dataflow'
      - 'flex-template'
      - 'build'
      - 'gs://${_BUCKET_TEMPLATES}/templates/hotelaria_trusted_pipeline.json'
      # --- CORREÇÃO PRINCIPAL: Usar --image apontando para Artifact Registry ---
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/hotelaria-pipelines-repo/hotelaria-pipeline:latest'
      - '--sdk-language=PYTHON'
      - '--metadata-file=metadata_trusted.json' # Adicione se usar metadados
      # Se não usar metadados, defina o módulo via env var:
      # - '--env=FLEX_TEMPLATE_PYTHON_PY_MODULE=hotelaria_pipeline.trusted.main_trusted'
    waitFor: ['Push-Image']

  # 6. Publicar Template REFINED (Apontando para Imagem no Artifact Registry)
  - name: 'google/cloud-sdk:latest' # Imagem atualizada do gcloud
    id: Publish-Refined-Template
    entrypoint: 'gcloud'
    args:
      - 'dataflow'
      - 'flex-template'
      - 'build'
      - 'gs://${_BUCKET_TEMPLATES}/templates/hotelaria_refined_pipeline.json'
      # --- CORREÇÃO PRINCIPAL: Usar --image apontando para Artifact Registry ---
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/hotelaria-pipelines-repo/hotelaria-pipeline:latest'
      - '--sdk-language=PYTHON'
      - '--metadata-file=metadata_refined.json' # Adicione se usar metadados
      # Se não usar metadados, defina o módulo via env var:
      # - '--env=FLEX_TEMPLATE_PYTHON_PY_MODULE=hotelaria_pipeline.refined.main_refined'
    waitFor: ['Push-Image']

# Variável de substituição (Configurada no Trigger)
substitutions:
  _BUCKET_TEMPLATES: 'bk-etl-hotelaria' # Valor Padrão

# Imagem final (Usando Artifact Registry)
images:
  # --- Caminho CORRETO do Artifact Registry ---
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/hotelaria-pipelines-repo/hotelaria-pipeline:latest'

# Configuração de Logging
options:
  logging: CLOUD_LOGGING_ONLY